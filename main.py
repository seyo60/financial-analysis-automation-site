import streamlit as st
import re
import tempfile
import fpdf
from modules.data_extractor import extract_tables_from_docx
from modules.webScrapping import fetch_hisse_lotlari
from modules.ratio_calculator import (
    fk_orani, 
    fd_divide_favok as fddividefavok, 
    pd_divide_dd as pd_divided_dd,     
    borctoplamvarlik, 
    asittestorani,
    carioran,
    netkarmarji, 
    aktifkarlilik, 
    ozsermayekarliligi, 
    alacakdevirhizi, 
    stokdevirhizi
)
from modules.dcf_model import nwcdegisim, capex, vergiorani, fcf, bes_yillik_fcf, bes_yillik_indirgeme, terminal_degeri
from modules.visualization import draw_valuation_multiples_chart, draw_fcf_chart, draw_dcf_chart, draw_terminal_value_chart, draw_liquidity_chart, draw_debt_chart, draw_profitability_chart, draw_activity_chart, draw_financial_metrics_chart, create_pdf_report


st.set_page_config(page_title="Finansal Analiz", layout="wide")

def format_number(value, decimal_places=2):
    """SayÄ±yÄ± binlik ayraÃ§larÄ±yla formatlar"""
    try:
        if isinstance(value, (int, float)):
            return "{:,.{}f}".format(value, decimal_places).replace(",", "X").replace(".", ",").replace("X", ".")
        return value
    except:
        return value


def get_hisse_lotlari():
    try:
        lot_data = fetch_hisse_lotlari()
        
        if isinstance(lot_data, (tuple, list)):
            pay = lot_data[0] if len(lot_data) > 0 else 0
            ek_pay = lot_data[1] if len(lot_data) > 1 else 0
            return pay, ek_pay
        elif isinstance(lot_data, dict):
            pay = lot_data.get('pay_lot', 0)
            ek_pay = lot_data.get('ek_pay_lot', 0)
            return pay, ek_pay
        return 0, 0
        
    except Exception as e:
        st.error(f"Hata: {str(e)}")
        return 0, 0

def clean_numeric(value):
    """Binlik ayraÃ§lÄ± ve parantezli deÄŸerleri float'a Ã§evirir"""
    if isinstance(value, str):
        value = value.strip()
        if value.startswith('(') and value.endswith(')'):
            value = '-' + value[1:-1]  
        value = value.replace('.', '').replace(',', '.')  
    try:
        return float(value)
    except (ValueError, TypeError):
        return 0.0


st.title("ðŸ“Š Finansal Analiz Otomasyonu")

uploaded_file = st.file_uploader("Word dosyasÄ±nÄ± yÃ¼kleyin (.docx)", type=["docx"])

kisaVadeli = 0.0
uzun_vadeli_borclanma_kisa_vadeli = 0.0
uzunVadeliBorc = 0.0
nakitVb = 0.0
finansalYatirimlar = 0.0
netKar = 0.0
finansmanGiderleri = 0.0
finansmanGelirleri = 0.0
amortismanVeItfaPaylari = 0.0
ozSermaye = 0.0

if uploaded_file:
    try:
        tables = extract_tables_from_docx(uploaded_file)
        if not tables:
            st.warning("Dosyada tablo bulunamadÄ±.")
        else:
            for i, df in enumerate(tables):
                st.subheader(f"ðŸ“‹ Tablo {i+1}")
                st.dataframe(df, use_container_width=True)

                csv = df.to_csv(index=False).encode("utf-8")
                st.download_button(
                    f"ðŸ“¥ Tablo {i+1} indir (CSV)",
                    csv,
                    f"tablo_{i+1}.csv",
                    "text/csv",
                    key=f"download_{i}"
                )
                
            
      
            available_periods = []
            if len(tables) > 0:
                header_row = tables[0].columns.tolist()
                date_columns = [col for col in header_row if len(col.split('.')) == 3 and col.replace('.', '').isdigit()]
                available_periods = sorted(date_columns)  

            if available_periods:
                st.header("BilanÃ§o Verileri iÃ§in DÃ¶nem SeÃ§imi")
                col_bs1, col_bs2 = st.columns(2)
                
                with col_bs1:
             
                    selected_period_end = st.selectbox(
                        "BilanÃ§o DÃ¶nem Sonu SeÃ§in",
                        available_periods,
                        index=len(available_periods)-1,
                        key="bs_end"
                    )
                
                with col_bs2:
              
                    bs_previous_periods = [p for p in available_periods if p < selected_period_end]
                    selected_period_start = st.selectbox(
                        "BilanÃ§o DÃ¶nem BaÅŸÄ± SeÃ§in",
                        bs_previous_periods,
                        index=len(bs_previous_periods)-1 if bs_previous_periods else 0,
                        key="bs_start"
                    )
            else:
                st.warning("BilanÃ§o tablolarÄ±nda dÃ¶nem bilgisi bulunamadÄ±.")

 
            available_periods_other = []
            if len(tables) > 2:
                income_table = tables[2]
                header_row = income_table.columns.tolist()
                
                date_columns = [col for col in header_row 
                       if any(month in col for month in ["January", "February", "March", "April", 
                                                       "May", "June", "July", "August",
                                                       "September", "October", "November", "December"])
                       and any(year in col for year in ["2023", "2024", "2025"])]
                available_periods_other = sorted(date_columns)

            if available_periods_other:
                st.header("Gelir Tablosu iÃ§in DÃ¶nem SeÃ§imi")
                col_pl1, col_pl2 = st.columns(2)
                
                with col_pl1:
                    
                    selected_period_2_end = st.selectbox(
                        "Gelir Tablosu DÃ¶nem Sonu SeÃ§in",
                        available_periods_other,
                        index=len(available_periods_other)-1,
                        key="pl_end"
                    )
                
                with col_pl2:
                 
                    pl_previous_periods = [p for p in available_periods_other if p < selected_period_2_end]
                    selected_period_2_start = st.selectbox(
                        "Gelir Tablosu DÃ¶nem BaÅŸÄ± SeÃ§in",
                        pl_previous_periods,
                        index=len(pl_previous_periods)-1 if pl_previous_periods else 0,
                        key="pl_start"
                    )
            else:
                st.warning("Gelir tablosunda dÃ¶nem bilgisi bulunamadÄ±.")

            try:
                if len(tables) > 1:
                    df2 = tables[1]
                    try:
                        kisaVadeli = clean_numeric(df2.loc[df2.iloc[:, 0] == "Short term borrowings", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Short term borrowings bulunamadÄ±")
                    try:
                        kisaVadeliYukumlulukler = clean_numeric(df2.loc[df2.iloc[:, 0] == "TOTAL CURRENT LIABILITIES", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("TOTAL CURRENT LIABILITIES bulunamadÄ±")
                    try:
                        uzunVadeliYukumlulukler = clean_numeric(df2.loc[df2.iloc[:, 0] == "TOTAL NON CURRENT LIABILITIES", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("TOTAL NON CURRENT LIABILITIES bulunamadÄ±")
                    try:
                        calisanlaraIliskinYukumlulukler = clean_numeric(df2.loc[df2.iloc[:, 0] == "Liabilities for employee benefits", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Liabilities for employee benefits bulunamadÄ±")
                    try:
                        kiralama_borclarinin_kisa_vadeli_kismi = clean_numeric(df2.loc[df2.iloc[:, 0] == "Lease liabilities", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Lease liabilities bulunamadÄ±")
                    try:
                        uzun_vadeli_kiralama_borclari = clean_numeric(df2.loc[df2.iloc[:, 0] == "Long term lease liabilities", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Long term lease liabilities bulunamadÄ±")
                    try:
                        uzun_vadeli_borclanma_kisa_vadeli = clean_numeric(df2.loc[df2.iloc[:, 0] == "Short term portion of long term borrowings", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Short term portion of long term borrowings bulunamadÄ±")
                    try:
                        uzunVadeliBorc = clean_numeric(df2.loc[df2.iloc[:, 0] == "Long term borrowings", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Long term borrowings bulunamadÄ±")
                    try:
                        ticariBorclar = clean_numeric(df2.loc[df2.iloc[:, 0] == "Trade payables", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Trade payables bulunamadÄ±")    
                    try:
                        digerBorclar = clean_numeric(df2.loc[df2.iloc[:, 0] == "Other payables", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Other payables bulunamadÄ±")   
                    try:
                        ertelenmisGelirler = clean_numeric(df2.loc[df2.iloc[:, 0] == "Deferred income to third parties", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Deferred income to third parties bulunamadÄ±")   
                    try:
                        kisaVadeliKarsiliklar = clean_numeric(df2.loc[df2.iloc[:, 0] == "Short term provisions", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Short term provisions bulunamadÄ±")                  
                    try:
                        ozKaynak = clean_numeric(df2.loc[df2.iloc[:, 0] == "TOTAL EQUITY", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("TOTAL EQUITY bulunamadÄ±")
                
                if len(tables) > 0:
                    df1 = tables[0]
                    try:
                        nakitVb = clean_numeric(df1.loc[df1.iloc[:, 0] == "Cash and cash equivalents", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Cash and cash equivalents bulunamadÄ±")
                    try:
                        ticariAlacaklar_son = clean_numeric(df1.loc[df1.iloc[:, 0] == "Trade receivables", selected_period_end].values[0])
                        ticariAlacaklar_bas = clean_numeric(df1.loc[df1.iloc[:, 0] == "Trade receivables", selected_period_start].values[0])
                    except (IndexError, KeyError):
                        st.warning("Trade receivables bulunamadÄ±")
                    try:
                        pesinOdenmisGiderler = clean_numeric(df1.loc[df1.iloc[:, 0] == "Prepaid expenses", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Prepaid expenses bulunamadÄ±")
                    try:
                        stoklar_son = clean_numeric(df1.loc[df1.iloc[:, 0] == "Inventories", selected_period_end].values[0])
                        stoklar_bas = clean_numeric(df1.loc[df1.iloc[:, 0] == "Inventories", selected_period_start].values[0])
                    except (IndexError, KeyError):
                        st.warning("Inventories bulunamadÄ±")  
                    try:
                        digerDonenVarliklar = clean_numeric(df1.loc[df1.iloc[:, 0] == "Other current assests", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Other current assests bulunamadÄ±") 
                    try:
                        donenVarliklar = clean_numeric(df1.loc[df1.iloc[:, 0] == "TOTAL CURRENT ASSETS", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("TOTAL CURRENT ASSETS bulunamadÄ±")    
                    try:
                        duranVarliklar = clean_numeric(df1.loc[df1.iloc[:, 0] == "TOTAL NON CURRENT ASSETS", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("TOTAL NON CURRENT ASSETS bulunamadÄ±")
                    try:
                        toplamVarliklar = clean_numeric(df1.loc[df1.iloc[:, 0] == "TOTAL ASSETS", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("TOTAL ASSETS bulunamadÄ±")                           
                    try:
                        finansalYatirimlar = clean_numeric(df1.loc[df1.iloc[:, 0] == "Financial investments", selected_period_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Financial investments bulunamadÄ±")

                if len(tables) > 2:
                    df3 = tables[2]
                    try:
                        netKar = clean_numeric(df3.loc[df3.iloc[:, 0] == "Profit / (loss) for the period", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Profit / (loss) for the period bulunamadÄ±")
                    try:
                        vergiOncesiFaaliyetKariZarari = clean_numeric(df3.loc[df3.iloc[:, 0] == "Profit / (loss) before tax", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Profit / (loss) before tax bulunamadÄ±")
                    try:
                        donemOncesiVergiGelirGideri = clean_numeric(df3.loc[df3.iloc[:, 0] == "Current tax expense for the year", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Current tax expense for the year bulunamadÄ±")
                    try:
                        hasilat = clean_numeric(df3.loc[df3.iloc[:, 0] == "Revenue", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Revenue bulunamadÄ±")
                    try:
                        finansmanGiderleri = clean_numeric(df3.loc[df3.iloc[:, 0] == "Financial expense (-)", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Financial expense (-) bulunamadÄ±")
                    try:
                        finansmanGelirleri = clean_numeric(df3.loc[df3.iloc[:, 0] == "Financial income", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Financial income bulunamadÄ±")
                    try:
                        satilanMalinMaliyeti = clean_numeric(df3.loc[df3.iloc[:, 0] == "Cost of sales (-)", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Cost of sales (-) bulunamadÄ±")
                    try:
                        brutKar = clean_numeric(df3.loc[df3.iloc[:, 0] == "Gross profit / (loss)", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Gross profit / (loss) bulunamadÄ±")
                    try:
                        genelYonetimGiderleri = clean_numeric(df3.loc[df3.iloc[:, 0] == "General and administrative expenses (-)", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("General and administrative expenses (-) bulunamadÄ±")
                    try:
                        pazarlamaGiderleri = clean_numeric(df3.loc[df3.iloc[:, 0] == "Selling, marketing and distribution expenses (-)", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Selling, marketing and distribution expenses (-) bulunamadÄ±")
                    try:
                        argeGiderleri = clean_numeric(df3.loc[df3.iloc[:, 0] == "Research and development expenses (-)", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Research and development expenses (-) bulunamadÄ±")
                    try:
                        amortismanVeItfaPaylari = clean_numeric(df3.loc[df3.iloc[:, 0] == "Operating profit / (loss)", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Operating profit / (loss) bulunamadÄ±")
                    try:
                        hisseBasiKar = clean_numeric(df3.loc[df3.iloc[:, 0] == "Earnings per share from continuing operations", selected_period_2_end].values[0])
                    except (IndexError, KeyError):
                        st.warning("Earnings per share from continuing operations bulunamadÄ±")
                        
            except Exception as e:
                st.error(f"Tablo verileri iÅŸlenirken hata: {str(e)}")

    except Exception as e:
        st.error(f"Dosya iÅŸlenirken hata: {str(e)}")


selected_module = st.selectbox(
    "ModÃ¼l SeÃ§imi:",
    ("Ã‡arpan Hesaplama ModÃ¼lÃ¼", "DCF / Ä°NA Hesaplama", "Finansal Rasyolar ve Analiz", "Grafik ve Raporlama ModÃ¼lÃ¼"),
    key="module_select"
) 


if selected_module != "LÃ¼tfen bir modÃ¼l seÃ§iniz":
    if st.button("Getir", key="getir_button"):
        st.session_state['selected_module'] = selected_module
        st.session_state['show_module'] = True


if st.session_state.get('show_module', False) and uploaded_file:
    if st.session_state['selected_module'] == "Ã‡arpan Hesaplama ModÃ¼lÃ¼":
        st.title("ðŸ“Š Ã‡arpan Hesaplama ModÃ¼lÃ¼")
        
  
        piyasa_fiyati = st.number_input("Piyasa FiyatÄ± (USD)", value=10.0, min_value=0.0, key="piyasa_fiyati")
        pay_lot, ek_pay_lot = get_hisse_lotlari()

        if st.button("Hesapla", key="hesapla_button"):
            try:
                toplam_hisse = pay_lot + ek_pay_lot
                
                hisseBasiKar = hisseBasiKar/10
                fk = fk_orani(piyasa_fiyati, hisseBasiKar)
                fd_favok = fddividefavok(  
                    kisaVadeli, 
                    uzun_vadeli_borclanma_kisa_vadeli, 
                    kiralama_borclarinin_kisa_vadeli_kismi,
                    uzunVadeliBorc, 
                    uzun_vadeli_kiralama_borclari,
                    netKar, 
                    finansmanGiderleri, 
                    amortismanVeItfaPaylari,
                    donemOncesiVergiGelirGideri, 
                    piyasa_fiyati,  
                    toplam_hisse, 
                    nakitVb, 
                    finansalYatirimlar
                )           
                pd_dd = pd_divided_dd(pay_lot, ek_pay_lot, piyasa_fiyati, ozKaynak)
                favok = netKar + donemOncesiVergiGelirGideri + finansmanGiderleri + amortismanVeItfaPaylari

             
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("ðŸ“ˆ F/K OranÄ±", 
                            f"{fk:.2f}x" if fk is not None else "HesaplanamadÄ±",
                            help="Piyasa FiyatÄ± / Hisse BaÅŸÄ± Kar")
                
                with col2:
                    st.metric("ðŸ“Š FD/FAVOK", 
                            f"{fd_favok:.2f}x" if fd_favok is not None else "HesaplanamadÄ±",
                            help="Firma DeÄŸeri / FAVOK")
                    toplam_borc = (kisaVadeli + uzun_vadeli_borclanma_kisa_vadeli + 
                    kiralama_borclarinin_kisa_vadeli_kismi + uzunVadeliBorc + uzun_vadeli_kiralama_borclari)
                    net_borc = toplam_borc - (nakitVb + finansalYatirimlar)
                    
                
                with col3:
                    st.metric("ðŸ“‰ PD/DD", 
                            f"{pd_dd:.2f}x" if pd_dd is not None else "HesaplanamadÄ±",
                            help="Piyasa DeÄŸeri / Defter DeÄŸeri")

               
                st.session_state.update({
                    'fk': fk,
                    'fd_divide_favok': fd_favok,
                    'pd_divide_dd': pd_dd
                })

            except Exception as e:
                st.error(f"Hesaplama hatasÄ±: {str(e)}")
                
    elif st.session_state['selected_module'] == "DCF / Ä°NA Hesaplama":
        st.title("ðŸ“Š DCF / Ä°NA Hesaplama")
    
    
        available_periods = []
        if len(tables) > 0:
       
            header_row = tables[0].columns.tolist()
        
            date_columns = [col for col in header_row if re.match(r'^\d{2}\.\d{2}\.\d{4}$', col)]
            available_periods = sorted(date_columns, reverse=True)  
    
    
        col1, col2 = st.columns(2)
    
        with col1:
        
            period_end = st.selectbox(
            "DÃ¶nem Sonu Tarihini SeÃ§in",
                available_periods,
                index=0,
                key="dcf_period_end"
            )
            stoklar_son = clean_numeric(df1.loc[df1.iloc[:, 0] == "Inventories", period_end].values[0])

            ticariAlacaklar_son = clean_numeric(df1.loc[df1.iloc[:, 0] == "Trade receivables", period_end].values[0])

            pesinOdenmisGiderler_son = clean_numeric(df1.loc[df1.iloc[:, 0] == "Prepaid expenses", period_end].values[0])

            ticariBorclar_son = clean_numeric(df2.loc[df2.iloc[:, 0] == "Trade payables", period_end].values[0])

            pesinOdenmisGiderler_son = clean_numeric(df2.loc[df2.iloc[:, 0] == "Trade payables", period_end].values[0])

            ertelenmisGelirler_son = clean_numeric(df2.loc[df2.iloc[:, 0] == "Deferred income to third parties", period_end].values[0])
  
            digerDonenVarliklar_son = clean_numeric(df1.loc[df1.iloc[:, 0] == "Other current assests", period_end].values[0])
  
            maddiDuranVarlik_son = clean_numeric(df1.loc[df1.iloc[:, 0] == "Property, plant and equipment", period_end].values[0])

            maddiOlmayanDuranVarlik_son = clean_numeric(df1.loc[df1.iloc[:, 0] == "Intangible assets", period_end].values[0])

            donenVarliklar_son = clean_numeric(df1.loc[df1.iloc[:, 0] == "TOTAL CURRENT ASSETS", period_end].values[0])

            kisaVadeliYukumlulukler_son = clean_numeric(df2.loc[df2.iloc[:, 0] == "TOTAL CURRENT LIABILITIES", period_end].values[0])

            digerBorclar_son = clean_numeric(df2.loc[df2.iloc[:, 0] == "Other payables", period_end].values[0])


    
        with col2:
      
            filtered_periods = [d for d in available_periods if d < period_end]
        
            if not filtered_periods:
                st.warning("DÃ¶nem baÅŸÄ± iÃ§in uygun tarih bulunamadÄ±")
                period_start = None
            else:
                period_start = st.selectbox(
                "DÃ¶nem BaÅŸÄ± Tarihini SeÃ§in",
                    filtered_periods,
                    index=0,
                    key="dcf_period_start"
                )
                stoklar_bas = clean_numeric(df1.loc[df1.iloc[:, 0] == "Inventories", period_start].values[0])

                ticariAlacaklar_bas = clean_numeric(df1.loc[df1.iloc[:, 0] == "Trade receivables", period_start].values[0])

                pesinOdenmisGiderler_bas = clean_numeric(df1.loc[df1.iloc[:, 0] == "Prepaid expenses", period_start].values[0])

                ticariBorclar_bas = clean_numeric(df2.loc[df2.iloc[:, 0] == "Trade payables", period_start].values[0])

                ertelenmisGelirler_bas= clean_numeric(df2.loc[df2.iloc[:, 0] == "Deferred income to third parties", period_start].values[0])

                digerDonenVarliklar_bas = clean_numeric(df1.loc[df1.iloc[:, 0] == "Other current assests", period_start].values[0])

                maddiDuranVarlik_bas = clean_numeric(df1.loc[df1.iloc[:, 0] == "Property, plant and equipment", period_start].values[0])

                maddiOlmayanDuranVarlik_bas = clean_numeric(df1.loc[df1.iloc[:, 0] == "Intangible assets", period_start].values[0])

                donenVarliklar_bas = clean_numeric(df1.loc[df1.iloc[:, 0] == "TOTAL CURRENT ASSETS", period_start].values[0])

                kisaVadeliYukumlulukler_bas = clean_numeric(df2.loc[df2.iloc[:, 0] == "TOTAL CURRENT LIABILITIES", period_start].values[0])

                digerBorclar_bas = clean_numeric(df2.loc[df2.iloc[:, 0] == "Other payables", period_start].values[0])

        ebit = brutKar - ((genelYonetimGiderleri+ pazarlamaGiderleri + argeGiderleri)*-1)

        amortisman_raw = st.text_input(
            "YÄ±llÄ±k Amortisman TutarÄ± (â‚º)", 
            value="913.657",  
            key="amortisman_input"
        )
        cleaned_input = re.sub(r"[^\d]", "", amortisman_raw)  
        try:
            amortisman = int(cleaned_input)
        except ValueError:
            amortisman = 0
        amortisman_formatted = f"{amortisman:,}".replace(",", ".")
        st.write(f"ðŸ“Œ Girilen Amortisman TutarÄ±: {amortisman_formatted} â‚º")

        nwcDegisim_bas = nwcdegisim(donenVarliklar_bas, kisaVadeliYukumlulukler_bas)
        nwcDegisim_son = nwcdegisim(donenVarliklar_son, kisaVadeliYukumlulukler_son)
        nwcDegisim = nwcDegisim_son - nwcDegisim_bas
        st.success(f"ðŸ“Š Î”NWC: **{format_number(nwcDegisim, 2)}**")
        st.success(f"ðŸ“Š EBIT: **{format_number(ebit, 2)}**")
        st.success(f"ðŸ“Š Amortisman: **{format_number(amortisman, 2)}**")
        capexDegeri =  2846728
        st.success(f"ðŸ“Š Capex: **{format_number(capexDegeri, 2)}**")
        vergiOrani = vergiorani(donemOncesiVergiGelirGideri, vergiOncesiFaaliyetKariZarari)  
        st.success(f"ðŸ“Š Vergi OranÄ±: **{format_number(vergiOrani, 2)}**")
        fcfDegeri = fcf(nwcDegisim, capexDegeri, ebit, amortisman, donemOncesiVergiGelirGideri)
        st.success(f"ðŸ“Š FCF: **{format_number(fcfDegeri, 2)}**")

        st.subheader("YÄ±llÄ±k Faaliyet KarÄ± Tahminleri")
        faaliyet_kari = []
        for yil in range(1, 6):
            faaliyetKari_raw = st.text_input(
                f"{yil}. YÄ±l Faaliyet KarÄ± Tahmini (USD)", 
                value=0,  
                key=f"faaliyetkari_{yil}"
            )
            try:
                faaliyetKari = int(faaliyetKari_raw.replace(".", "").replace(",", "")) 
            except ValueError:
                faaliyetKari = 0
            faaliyet_kari.append(faaliyetKari)


        st.subheader("YÄ±llÄ±k Amortisman Tahminleri")
        amortisman_degerleri = []
        for yil in range(1, 6):
            amortismanRaw = st.text_input(
                f"{yil}. YÄ±l Amortisman Tahmini (USD)", 
                value=0,  
                key=f"amortisman_{yil}"
            )
            try:
                amortisman = int(amortismanRaw.replace(".", "").replace(",", "")) 
            except ValueError:
                amortisman = 0
            amortisman_degerleri.append(amortisman)

        st.subheader("YÄ±llÄ±k Ã–denen Vergi Tahminleri")
        odenen_vergi = []
        for yil in range(1, 6):
            odenenVergiRaw = st.text_input(
                f"{yil}. YÄ±l Ã–denen Vergi Tahmini (USD)", 
                value=0,  
                key=f"odenenvergi_{yil}"
            )
            try:
                odenenVergi = int(odenenVergiRaw.replace(".", "").replace(",", "")) 
            except ValueError:
                odenenVergi = 0
            odenen_vergi.append(odenenVergi)

        st.subheader("YÄ±llÄ±k Î”NWC Tahminleri")
        delta_NWC = []
        for yil in range(1, 6):
            deltaNWCRaw = st.text_input(
                f"{yil}. YÄ±l Î”NWC Tahmini (USD)", 
                value=0,  
                key=f"deltanwc_{yil}"
            )
            try:
                deltaNWC = int(deltaNWCRaw.replace(".", "").replace(",", ""))
            except ValueError:
                deltaNWC = 0
            delta_NWC.append(deltaNWC)

        st.subheader("YÄ±llÄ±k Capex Tahminleri")
        capex_degerleri = []
        for yil in range(1, 6):
            capexRaw_= st.text_input(
                f"{yil}. YÄ±l Capex Tahmini (USD)", 
                value=0,  
                key=f"capex_{yil}"
            )
            try:
                capex_ = int(capexRaw_.replace(".", "").replace(",", ""))
            except ValueError:
                capex_ = 0
            capex_degerleri.append(capex_)


        terminal_buyume = st.session_state.get('terminal_buyume')
        terminal_buyume = st.number_input(  
        "Terminal BÃ¼yÃ¼me OranÄ± (%) (10. yÄ±ldan sonra)", 
            min_value=0.0, 
            max_value=100.0, 
            step=0.1, 
            value=2.5
        ) / 100


        besYillikfcf = bes_yillik_fcf(faaliyet_kari, amortisman_degerleri, odenen_vergi, delta_NWC, capex_degerleri)

        terminal_fcf = besYillikfcf[-1] * (1 + terminal_buyume)


        st.success("ðŸ“Š 5 YÄ±llÄ±k FCF Tahminleri:")
        for yil, fcf in enumerate(besYillikfcf, 1):
            st.success(f"{yil}. YÄ±l FCF: {format_number(fcf, 2)}")

        st.success(f"Terminal FCF (5. YÄ±l SonrasÄ±): {terminal_fcf:.2f}")
      
        st.session_state['besYillikfcf'] = besYillikfcf
        st.session_state['terminal_fcf'] = terminal_fcf 
        st.subheader("YÄ±llÄ±k Ä°ndirgeme OranÄ±")
        indirgeme_degerleri = []
        for yil in range(1, 6):
            indirgeme_orani = st.number_input(
                f"{yil}. YÄ±l Ä°ndirgeme OranÄ± (%)", 
                value=50.0,  
                min_value=0.0,
                max_value=100.0,
                step=0.1,
                key=f"indirgemeorani_{yil}"
            )
            indirgeme_degerleri.append(indirgeme_orani / 100)  

        besYillikIndirgemeliDegerler = bes_yillik_indirgeme(besYillikfcf, indirgeme_degerleri)
        st.session_state['besYillikIndirgemeliDegerler'] = besYillikIndirgemeliDegerler
        st.success(f"ðŸ“Š BugunkÃ¼ DeÄŸerler (NPV): {format_number(besYillikIndirgemeliDegerler, 2)}")
        npvToplam = 0
        for i in range(5):
            npvToplam += besYillikIndirgemeliDegerler[i]
        st.success(f"ðŸ“Š BugunkÃ¼ DeÄŸerler (NPV) ToplamÄ±: {format_number(npvToplam, 2)}")
        netBorc = (kisaVadeli + uzun_vadeli_borclanma_kisa_vadeli + kiralama_borclarinin_kisa_vadeli_kismi + uzunVadeliBorc + uzun_vadeli_kiralama_borclari) - nakitVb - finansalYatirimlar
        st.session_state['netBorc'] = netBorc
        st.success(f"ðŸ“Š Net BorÃ§ : **{format_number(netBorc, 2)}**")
        wacc = 0.1318  # VarsayÄ±lan WACC deÄŸeri
        terminalDegeri = terminal_degeri(besYillikfcf, terminal_buyume, wacc)
        st.session_state['terminalDegeri'] = terminalDegeri
        st.success(f"ðŸ“Š Terminal DeÄŸeri: **{format_number(terminalDegeri, 2)}**")


        toplamSirketDegeri = sum(besYillikIndirgemeliDegerler) + terminalDegeri
        st.success(f"ðŸ“Š Åžirket DeÄŸeri : **{format_number(toplamSirketDegeri, 2)}**")
        st.session_state['toplamSirketDegeri'] = toplamSirketDegeri
        toplamFirmaDegeri = sum(besYillikIndirgemeliDegerler) + terminalDegeri - netBorc
        st.session_state['toplamFirmaDegeri'] = toplamFirmaDegeri
        st.success(f"ðŸ“Š Firma DeÄŸeri : **{format_number(toplamFirmaDegeri, 2)}**")


    elif st.session_state['selected_module'] == "Finansal Rasyolar ve Analiz":
        st.title("ðŸ“ˆ Finansal Rasyolar ve Analiz ModÃ¼lÃ¼")
        st.title("ðŸ“ˆ Likidite OranlarÄ±")
        cariOran = carioran(donenVarliklar, kisaVadeliYukumlulukler)
        st.session_state['cariOran'] = cariOran
        st.success(f"ðŸ“Š Cari Oran: **{cariOran:.2f}**")
        asitTestOrani = asittestorani(donenVarliklar, stoklar_son, kisaVadeli, uzun_vadeli_borclanma_kisa_vadeli, ticariBorclar, calisanlaraIliskinYukumlulukler, digerBorclar, ertelenmisGelirler, kisaVadeliKarsiliklar)
        st.session_state['asitTestOrani'] = asitTestOrani
        st.success(f"ðŸ“Š Asit - Test OranÄ±: **{asitTestOrani:.2f}**")

        st.title("ðŸ“ˆ BorÃ§luluk OranÄ±")
        borcToplamVarlik = borctoplamvarlik(donenVarliklar, duranVarliklar, kisaVadeliYukumlulukler, uzunVadeliYukumlulukler)
        st.session_state['borcToplamVarlik'] = borcToplamVarlik
        st.success(f"ðŸ“Š BorÃ§ / Toplam VarlÄ±k: %**{borcToplamVarlik:.2f}**")

        st.title("ðŸ“ˆ KarlÄ±lÄ±k DeÄŸerleri")
        netKarMarji = netkarmarji(netKar, hasilat)
        st.session_state['netKarMarji'] = netKarMarji
        st.success(f"ðŸ“Š Net Kar MarjÄ±: %**{netKarMarji:.2f}**")
        aktifKarlilikOrani = aktifkarlilik(netKar, donenVarliklar, duranVarliklar)
        st.session_state['aktifKarlilikOrani'] = aktifKarlilikOrani
        st.success(f"ðŸ“Š Aktif KarlÄ±lÄ±k OranÄ±: %**{aktifKarlilikOrani:.2f}**")
        ozSermayeKarliligi = ozsermayekarliligi(netKar, ozKaynak)
        st.session_state['ozSermayeKarliligi'] = ozSermayeKarliligi
        st.success(f"ðŸ“Š Ã–z Sermaye KarlÄ±lÄ±ÄŸÄ±: %**{ozSermayeKarliligi:.2f}**")

        st.title("ðŸ“ˆ Faaliyet DeÄŸerleri")
        alacakDevirHizi = alacakdevirhizi(hasilat, ticariAlacaklar_son)
        st.session_state['alacakDevirHizi'] = alacakDevirHizi
        st.success(f"ðŸ“Š Alacak Devir HÄ±zÄ±: **{alacakDevirHizi:.2f}**")
        stokDevirHizi = stokdevirhizi(satilanMalinMaliyeti, stoklar_son)
        stokDevirHizi*=-1
        st.session_state['stokDevirHizi'] = stokDevirHizi
        st.success(f"ðŸ“Š Stok Devir HÄ±zÄ±: **{stokDevirHizi:.2f}**")   

    elif st.session_state['selected_module'] == "Grafik ve Raporlama ModÃ¼lÃ¼":
        st.title("ðŸ“Š Grafik ve Raporlama ModÃ¼lÃ¼")
        st.info("Finansal Analiz Grafikleri ve RaporlarÄ±")

        report_figs = []

        st.subheader("ðŸ“ˆ Finansal Grafikler")


        with st.expander("DeÄŸerleme Ã‡arpanlarÄ±"):
            fig = draw_valuation_multiples_chart()
            if fig:
                st.pyplot(fig)
                report_figs.append(("DeÄŸerleme Ã‡arpanlarÄ±", fig))

        with st.expander("Nakit AkÄ±mÄ± Analizi"):
            col1, col2 = st.columns(2)
            with col1:
                fig = draw_fcf_chart()
                if fig:
                    st.pyplot(fig)
                    report_figs.append(("5 YÄ±llÄ±k FCF Tahminleri", fig))
        
            with col2:
                fig = draw_dcf_chart()
                if fig:
                    st.pyplot(fig)
                    report_figs.append(("Ä°ndirgemeli Nakit AkÄ±mlarÄ±", fig))
        
            fig = draw_terminal_value_chart()
            if fig:
                st.pyplot(fig)
                report_figs.append(("Terminal DeÄŸer DaÄŸÄ±lÄ±mÄ±", fig))

     
        with st.expander("Finansal Oranlar"):
            col1, col2 = st.columns(2)
            with col1:
                fig = draw_liquidity_chart()
                if fig:
                    st.pyplot(fig)
                    report_figs.append(("Likidite OranlarÄ±", fig))
            
                fig = draw_debt_chart()
                if fig:
                    st.pyplot(fig)
                    report_figs.append(("BorÃ§luluk OranÄ±", fig))
        
            with col2:
                fig = draw_profitability_chart()
                if fig:
                    st.pyplot(fig)
                    report_figs.append(("KarlÄ±lÄ±k OranlarÄ±", fig))
            
                fig = draw_activity_chart()
                if fig:
                    st.pyplot(fig)
                    report_figs.append(("Faaliyet OranlarÄ±", fig))

        
        with st.expander("Finansal Metrikler"):
            fig = draw_financial_metrics_chart()
            if fig:
                st.pyplot(fig)
                report_figs.append(("Finansal Metrikler", fig))

        st.divider()
        st.subheader("ðŸ“‘ Rapor OluÅŸturma")

        if st.button("ðŸ“Š PDF Raporu OluÅŸtur"):
            with st.spinner("Rapor oluÅŸturuluyor..."):
                with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
                    if create_pdf_report(tmp_pdf.name, report_figs):
                        with open(tmp_pdf.name, "rb") as f:
                            st.download_button(
                                label="ðŸ“¥ PDF Raporunu Ä°ndir",
                                data=f,
                                file_name="finansal_analiz_raporu.pdf",
                                mime="application/pdf"
                            )
                        st.success("Rapor baÅŸarÄ±yla oluÅŸturuldu!")
                    else:
                        st.error("PDF oluÅŸturulamadÄ±! LÃ¼tfen verileri kontrol edin.")